
import scala.collection.AbstractSet
import scala.collection.generic.{CanBuildFrom,GenericCompanion,GenericSetTemplate,ImmutableSetFactory}
import scala.collection.immutable.Set
import scala.collection.mutable
import scala.collection.SetLike

//object Test {

trait TestTrait
case class AAA() extends TestTrait

class TestSet[A <: TestTrait]
    (set: Set[A] = Set.empty[A])
    extends AbstractSet[A]
    with Set[A]
    with SetLike[A, TestSet[A]]
//    with GenericSetTemplate[A, TestSet]
    with Serializable
{
    def +(elem: A): TestSet[A] = new TestSet(set + elem)
    def -(elem: A): TestSet[A] = new TestSet(set - elem)
    def contains(elem: A): Boolean = set.contains(elem)
    def iterator: Iterator[A] = set.iterator
    override def empty = new TestSet
//    override def companion: GenericCompanion[TestSet] = TestSet
}

object TestSet extends ImmutableSetFactory[TestSet] {
//    implicit def canBuildFrom[A <: TestTrait]: CanBuildFrom[Coll, A, TestSet[A]] = setCanBuildFrom[A]

    private object EmptyTestSet extends TestSet[TestTrait] { }
    def emptyInstance: TestSet[Any] = EmptyTestSet.asInstanceOf[TestSet[Any]]

//    override def empty[A <: TestTrait] = emptyInstance.asInstanceOf[TestSet[A]]
}

//}
//import Test._
